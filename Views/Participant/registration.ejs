<!-- views/participant/registration.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Participant Registration</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&family=Poppins:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="/Style/style.css" rel="stylesheet"> 
  <style>
    body {
      background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.848)), url("/Pictures/Baratham_Pic3.jpg");
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
      min-height: 80vh;
    }
    
    .container {
      background-color: rgba(16, 29, 44, 0.95);
      border-radius: 25px;
      padding: 50px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
      margin-top: 60px;    
    }

    .form-title {
      text-align: center;
      margin-top: 20px;
      color: var(--text-color);
      font-weight: bold;
    }

    .form-subtitle {
      font-size: 1.1em;
      font-weight: bold;
      padding: 1rem;
      margin-bottom: 2rem;
      background-color: rgba(255, 69, 0, 0.1);
      border-radius: 5px;
      color: var(--text-color);
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-control {
      background-color: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
    }

    .form-control:focus {
      background-color: rgba(255, 255, 255, 0.15);
      border-color: var(--hover-color);
      color: white;
      box-shadow: 0 0 0 0.2rem rgba(255, 69, 0, 0.25);
    }

    .form-control::-webkit-input-placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    .card {
      background-color: var(--secondary-color);
      margin-bottom: 20px;
    }

    .card-body {
      color: white;
      padding: 1.5rem; 
    }

    .card-title {
      color: #FF4500;
    }

    .btn-info {
      background-color: #8B1F2F;
      border-color: #8B1F2F;
      padding: 8px 20px;
      transition: all 0.3s ease;
    }

    .btn-info:hover {
      background-color: #6b1824;
      border-color: #6b1824;
      transform: translateY(-2px);
    }

    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
      transition: all 0.3s ease;
    }

    .btn-danger:hover {
      background-color: #bd2130;
      border-color: #bd2130;
    }

    .btn-primary {
      background-color: #8B1F2F;
      border-color: #8B1F2F;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #6b1824;
      border-color: #6b1824;
      transform: translateY(-2px);
    }

    label {
      color: rgba(255, 255, 255, 0.9);
      font-weight: 500;
      margin-bottom: 0.5rem;
    }

    select option {
      background-color: #1A1A1A;
      color: white;
    }

    .is-invalid {
      border-color: #dc3545;
    }

    .text-center {
      color: rgba(255, 255, 255, 0.8);
    }

    .loading-spinner {
      display: none;
      margin-left: 10px;
    }

    #error-message {
      color: #dc3545;
      margin-top: 10px;
      text-align: center;
      display: none;
    }

    #success-message {
      color: #28a745;
      margin-top: 10px;
      text-align: center;
      display: none;
    }
  </style>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-dark fixed">
    <a class="navbar-brand" href="/">Kalakshetra 6.0</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item"><a class="nav-link" href="/">About</a></li>
        <li class="nav-item"><a class="nav-link" href="/registration">Participants</a></li>
        <li class="nav-item"><a class="nav-link" href="/merchandise">Merchandise</a></li>
        <li class="nav-item"><a class="nav-link" href="/tickets">Tickets</a></li>
        <li class="nav-item"><a class="nav-link" href="#faq">FAQ</a></li>
        <li class="nav-item"><a class="nav-link" href="#contact">Contact</a></li>
    </ul>
        <a class="btn btn-custom1" href="/admin"><strong>ADMIN LOGIN</strong></a>
    </div>
  </nav>

  <div class="container mt-5 pt-5">
    <h2 class="form-title">Participant Registration Form</h2>
    <p class="text-center">Please fill the form below carefully</p>
    <div id="error-message"></div>
    <div id="success-message"></div>
    <form id="registration-form">
      <div class="form-group mt-3">
        <label for="team-name">Team Name</label>
        <input type="text" class="form-control" id="team-name" name="team-name" required>
      </div>

      <div class="form-group mt-3">
        <label for="category">Category</label>
        <select class="form-control" id="category" name="category" required>
          <option value="">Select Category</option>
          <option value="individual">Individual</option>
          <option value="group">Group</option>
        </select>
      </div>

      <div id="participant-fields"></div>

      <div id="group-controls" style="display: none;" class="text-center mt-3">
        <button type="button" class="btn btn-info" id="add-member">Add Team Member</button>
      </div>

      <div class="text-center mt-4">
        <button type="submit" class="btn btn-primary" id="submit-button">
          Submit & Proceed to Payment
          <span class="loading-spinner spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        </button>
      </div>
    </form>
  </div>

  <script>
    let memberCount = 1;

// Add stylesheet for validation alerts
const style = document.createElement('style');
style.textContent = `
    .validation-alert {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        color: #856404;
        padding: 12px;
        margin-top: 5px;
        border-radius: 4px;
        display: flex;
        align-items: center;
    }
    .validation-alert::before {
        content: "!";
        background-color: #856404;
        color: white;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
        font-weight: bold;
    }
`;
document.head.appendChild(style);

document.getElementById('category').addEventListener('change', function() {
    const participantFields = document.getElementById('participant-fields');
    const groupControls = document.getElementById('group-controls');
    participantFields.innerHTML = '';
    memberCount = 1;

    const isGroup = this.value === 'group';
    const title = isGroup ? 'Team Leader' : 'Participant';
    
    participantFields.appendChild(createParticipantCard(1, title));
    groupControls.style.display = isGroup ? 'block' : 'none';
});

function createParticipantCard(index, title) {
    const card = document.createElement('div');
    card.classList.add('card', 'mb-3');
    card.id = `member-card-${index}`;
    
    card.innerHTML = `
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title">${title}</h5>
                ${index > 1 ? `<button type="button" class="btn btn-danger btn-sm" onclick="removeMember(${index})">Remove</button>` : ''}
            </div>
            <div class="row">
                <div class="col-md-6 form-group">
                    <label for="name-${index}">Full Name</label>
                    <input type="text" class="form-control" id="name-${index}" name="name-${index}" required>
                </div>
                <div class="col-md-6 form-group">
                    <label for="matric-${index}">Matric Number</label>
                    <input type="text" class="form-control" id="matric-${index}" name="matric-${index}" required>
                </div>
                <div class="col-md-6 form-group">
                    <label for="email-${index}">Email</label>
                    <input type="email" class="form-control" id="email-${index}" name="email-${index}" required>
                </div>
                <div class="col-md-3 form-group">
                    <label for="gender-${index}">Gender</label>
                    <select class="form-control" id="gender-${index}" name="gender-${index}" required>
                        <option value="">Select Gender</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="col-md-3 form-group">
                    <label for="age-${index}">Age</label>
                    <input type="number" class="form-control" id="age-${index}" name="age-${index}" min="18" required>
                </div>
            </div>
        </div>
    `;
    return card;
}

document.getElementById('add-member').addEventListener('click', function() {
    memberCount++;
    if (memberCount <= 5) {
        const participantFields = document.getElementById('participant-fields');
        participantFields.appendChild(createParticipantCard(memberCount, `Team Member ${memberCount}`));
    }
    if (memberCount === 5) {
        this.style.display = 'none';
    }
});

function removeMember(index) {
    const card = document.getElementById(`member-card-${index}`);
    card.remove();
    memberCount--;
    document.getElementById('add-member').style.display = 'block';
}

const SecurityValidation = {
    sanitizeText(input) {
        if (typeof input !== 'string') return '';
        return input
            .trim()
            .replace(/[<>]/g, '')
            .replace(/['"]/g, '')
            .replace(/[;]/g, '');
    },

    validateEmail(email) {
        const sanitizedEmail = this.sanitizeText(email);
        const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
        return {
            isValid: emailRegex.test(sanitizedEmail),
            sanitized: sanitizedEmail
        };
    },

    validateMatric(matric) {
        const sanitizedMatric = this.sanitizeText(matric);
        const matricRegex = /^\d{6}$/;
        return {
            isValid: matricRegex.test(sanitizedMatric),
            sanitized: sanitizedMatric
        };
    },

    validateName(name) {
        const sanitizedName = this.sanitizeText(name);
        const nameRegex = /^[A-Za-z\s'-]{2,50}$/;
        return {
            isValid: nameRegex.test(sanitizedName),
            sanitized: sanitizedName
        };
    },

    validateAge(age) {
        const numAge = parseInt(age);
        return {
            isValid: !isNaN(numAge) && numAge >= 18 && numAge <= 100,
            sanitized: numAge
        };
    },

    validateTeamName(teamName) {
        const sanitizedTeamName = this.sanitizeText(teamName);
        const teamNameRegex = /^[A-Za-z0-9\s'-]{2,30}$/;
        return {
            isValid: teamNameRegex.test(sanitizedTeamName),
            sanitized: sanitizedTeamName
        };
    }
};

// Add real-time validation feedback
function addInputValidation() {
    document.getElementById('team-name').addEventListener('input', function() {
        const validation = SecurityValidation.validateTeamName(this.value);
        let feedback = this.parentNode.querySelector('.validation-alert');
        
        if (!validation.isValid) {
            if (!feedback) {
                feedback = document.createElement('div');
                feedback.className = 'validation-alert';
                this.parentNode.appendChild(feedback);
            }
            feedback.textContent = 'Team Name must be 2-30 characters long and can only contain letters, numbers, spaces, hyphens or apostrophes';
            this.classList.add('is-invalid');
        } else {
            if (feedback) feedback.remove();
            this.classList.remove('is-invalid');
        }
    });

    document.getElementById('participant-fields').addEventListener('input', function(e) {
        const input = e.target;
        if (!input.id) return;

        let feedback = input.parentNode.querySelector('.validation-alert');

        if (input.id.startsWith('name-')) {
            const validation = SecurityValidation.validateName(input.value);
            if (!validation.isValid) {
                if (!feedback) {
                    feedback = document.createElement('div');
                    feedback.className = 'validation-alert';
                    input.parentNode.appendChild(feedback);
                }
                feedback.textContent = 'Name must be 2-50 characters long and can only contain letters, spaces, hyphens or apostrophes';
                input.classList.add('is-invalid');
            } else {
                if (feedback) feedback.remove();
                input.classList.remove('is-invalid');
            }
        }
        
        else if (input.id.startsWith('matric-')) {
            const validation = SecurityValidation.validateMatric(input.value);
            if (!validation.isValid) {
                if (!feedback) {
                    feedback = document.createElement('div');
                    feedback.className = 'validation-alert';
                    input.parentNode.appendChild(feedback);
                }
                feedback.textContent = 'Matric number must be exactly 6 digits';
                input.classList.add('is-invalid');
            } else {
                if (feedback) feedback.remove();
                input.classList.remove('is-invalid');
            }
        }
        
        else if (input.id.startsWith('email-')) {
            const validation = SecurityValidation.validateEmail(input.value);
            if (!validation.isValid) {
                if (!feedback) {
                    feedback = document.createElement('div');
                    feedback.className = 'validation-alert';
                    input.parentNode.appendChild(feedback);
                }
                feedback.textContent = 'Please include an "@" in the email address';
                input.classList.add('is-invalid');
            } else {
                if (feedback) feedback.remove();
                input.classList.remove('is-invalid');
            }
        }
        
        else if (input.id.startsWith('age-')) {
            const validation = SecurityValidation.validateAge(input.value);
            if (!validation.isValid) {
                if (!feedback) {
                    feedback = document.createElement('div');
                    feedback.className = 'validation-alert';
                    input.parentNode.appendChild(feedback);
                }
                feedback.textContent = 'Age must be between 18 and 100 years';
                input.classList.add('is-invalid');
            } else {
                if (feedback) feedback.remove();
                input.classList.remove('is-invalid');
            }
        }
    });
}

document.addEventListener('DOMContentLoaded', addInputValidation);

// Form submission handling
document.getElementById('registration-form').addEventListener('submit', async function(event) {
    event.preventDefault();
    const submitButton = document.getElementById('submit-button');
    const loadingSpinner = document.querySelector('.loading-spinner');
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');

    submitButton.disabled = true;
    loadingSpinner.style.display = 'inline-block';
    errorMessage.style.display = 'none';
    successMessage.style.display = 'none';

    try {
        const category = SecurityValidation.sanitizeText(document.getElementById('category').value);
        const teamName = SecurityValidation.validateTeamName(document.getElementById('team-name').value).sanitized;
        
        const participants = [];
        for (let i = 1; i <= memberCount; i++) {
            const nameValidation = SecurityValidation.validateName(document.getElementById(`name-${i}`).value);
            const emailValidation = SecurityValidation.validateEmail(document.getElementById(`email-${i}`).value);
            const matricValidation = SecurityValidation.validateMatric(document.getElementById(`matric-${i}`).value);
            const ageValidation = SecurityValidation.validateAge(document.getElementById(`age-${i}`).value);
            
            participants.push({
                name: nameValidation.sanitized,
                matric: matricValidation.sanitized,
                email: emailValidation.sanitized,
                gender: SecurityValidation.sanitizeText(document.getElementById(`gender-${i}`).value),
                age: ageValidation.sanitized
            });
        }

        const response = await fetch('/participant/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                teamName,
                category,
                participants
            })
        });

        const result = await response.json();

        if (result.success) {
            successMessage.textContent = 'Registration successful! Redirecting to payment...';
            successMessage.style.display = 'block';
            window.location.href = result.data.redirectUrl;
        } else {
            throw new Error(result.message || 'Registration failed');
        }

    } catch (error) {
        console.error('Registration error:', error);
        errorMessage.textContent = error.message || 'Registration failed. Please try again.';
        errorMessage.style.display = 'block';
        submitButton.disabled = false;
    } finally {
        loadingSpinner.style.display = 'none';
    }
});
</script>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>